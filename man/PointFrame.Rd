% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PointFrame.R
\name{PointFrame}
\alias{PointFrame}
\alias{names,PointFrame-method}
\alias{dim,PointFrame-method}
\alias{length,PointFrame-method}
\alias{[[,PointFrame,ANY,ANY-method}
\alias{$,PointFrame-method}
\alias{[,PointFrame,missing,ANY,ANY-method}
\alias{[,PointFrame,ANY,missing,ANY-method}
\alias{[,PointFrame,missing,missing,ANY-method}
\alias{[,PointFrame,ANY,character,ANY-method}
\alias{[,PointFrame,numeric,numeric,ANY-method}
\alias{as.data.frame,PointFrame-method}
\title{The `PointFrame` class}
\usage{
PointFrame(data = data.frame(), meta = Zattrs(), metadata = list(), ...)

\S4method{names}{PointFrame}(x)

\S4method{dim}{PointFrame}(x)

\S4method{length}{PointFrame}(x)

\S4method{[[}{PointFrame,ANY,ANY}(x, i, j, ...)

\S4method{$}{PointFrame}(x, name)

\S4method{[}{PointFrame,missing,ANY,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{PointFrame,ANY,missing,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{PointFrame,missing,missing,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{PointFrame,ANY,character,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{PointFrame,numeric,numeric,ANY}(x, i, j, ..., drop = TRUE)

\S4method{as.data.frame}{PointFrame}(x)
}
\arguments{
\item{data}{\code{arrow}-derived table for on-disk,
\code{data.frame} for in-memory representation.}

\item{meta}{\code{\link{Zattrs}}}

\item{metadata}{optional list of arbitrary 
content describing the overall object.}

\item{...}{optional arguments passed to and from other methods.}

\item{x}{\code{PointFrame}}

\item{i, j}{indices for subsetting (see \code{?base::Extract}).}

\item{name}{character string for extraction (see \code{?base::`$`}).}

\item{drop}{ignored.}
}
\value{
\code{PointFrame}
}
\description{
The \code{PointFrame} class stores \code{SpatialData} elements from its 
\code{"points"} layers. These are represented as \code{\link[arrow]{Table}}
(\code{data} slot) associated with .zattrs stored as \code{\link{Zattrs}} 
(\code{meta} slot); a list of \code{metadata} stores other arbitrary info.
 
Currently defined methods (here, \code{x} is a \code{PointFrame}):
\itemize{
\item \code{data/meta(x)} to access underlying \code{Table/Zattrs}
\item \code{names(x)} returns the underlying table's column names
\item \code{dim(x)} returns the dimensions of \code{data(x)}
\item \code{`$`,`[[`} directly access columns of \code{data(x)}
\item \code{filter,select} to subset rows/columns Ã  la \code{dplyr}
\item \code{as.data.frame} to coerce \code{x} to a \code{data.frame}
}
}
\examples{
library(SpatialData.data)
dir.create(tf <- tempfile())
base <- SpatialData.data:::.unzip_merfish_demo(tf)
x <- file.path(base, "points", "single_molecule")
(p <- readPoint(x))

head(as.data.frame(data(p)))
(q <- dplyr::filter(p, cell_type == "VISp_wm"))

}
